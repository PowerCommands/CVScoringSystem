@using Klingsten.CVScoringSystem.Shared.Models
@using Klingsten.CVScoringSystem.Shared.Managers
@inject IScorecardService ScorecardService
<h3>Common Vulnerability Scoring System - Calculator</h3>
<MudImage Src="images/cvss_web.png" Alt="CVSS logo" Elevation="25" Class="rounded-lg ma-4"/>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Border="true" KeepPanelsAlive="true">
    <MudTabPanel Text="Base score">
        <CvsScoreCard @ref="_cvsBaseScoreCard" ScoreCard="_baseScoreCard" OnScoreCardCompleted="OnScoreCardCompleted"></CvsScoreCard>
    </MudTabPanel>
    <MudTabPanel Text="Temporal score">
        <CvsScoreCard @ref="_cvsTemporalScoreCard" ScoreCard="_temporalScoreCard" OnScoreCardCompleted="OnScoreCardCompleted"></CvsScoreCard>
    </MudTabPanel>
    <MudTabPanel Text="Environment score">
        <CvsScoreCard @ref="_cvsEnvironmentScoreCard" ScoreCard="_environmentScoreCard" OnScoreCardCompleted="OnScoreCardCompleted"></CvsScoreCard>
    </MudTabPanel>
    <MudTabPanel Text="Modified">
        <CvsScoreCard @ref="_cvsModifiedScoreCard" ScoreCard="_modifiedScoreCard" OnScoreCardCompleted="OnScoreCardCompleted"></CvsScoreCard>
    </MudTabPanel>
</MudTabs>
@if (_completed)
{
    <MudItem xl="12" lg="12" xs="12" xxl="12" md="12" sm="12">
        <MudToolBar Style="@($"background-color:{_theme.Palette.Primary }; color:{_theme.Palette.AppbarText }")">
            <MudText>Vector string: @_vectorString</MudText>
        </MudToolBar>
        <AddReportDetail VectorString="@_vectorString"></AddReportDetail>
    </MudItem>
}
@code {
    MudTheme _theme = new();

    SurveyModel _survey = new();

    CvsScoreCard? _cvsBaseScoreCard;
    ScoreCard _baseScoreCard = new();

    CvsScoreCard? _cvsTemporalScoreCard;
    ScoreCard _temporalScoreCard = new();

    CvsScoreCard? _cvsEnvironmentScoreCard;
    ScoreCard _environmentScoreCard = new();

    CvsScoreCard? _cvsModifiedScoreCard;
    ScoreCard _modifiedScoreCard = new();

    string _vectorString = "";
    bool _completed;

    protected override void OnInitialized()
    {
        var scoreCards = ScorecardService.GetScoreCards().ToList();

        _baseScoreCard = scoreCards.First(s => s.MetricType == ScoreMetricType.Base);
        _temporalScoreCard = scoreCards.First(s => s.MetricType == ScoreMetricType.Temporal);
        _environmentScoreCard = scoreCards.First(s => s.MetricType == ScoreMetricType.Environmental);
        _modifiedScoreCard = scoreCards.First(s => s.MetricType == ScoreMetricType.Modified);

        StateHasChanged();
    }

    private void OnScoreCardCompleted(ScoreCard scoreCard)
    {
        var metrics = new List<Metric>();
        metrics.AddRange(_baseScoreCard.Metrics);
        metrics.AddRange(_temporalScoreCard.Metrics);
        metrics.AddRange(_environmentScoreCard.Metrics);
        metrics.AddRange(_modifiedScoreCard.Metrics);

        var vectorStringArray = metrics.Select(m => m.ToVectoryStringValue()).ToArray();
        var vectorString = $"CVSS:3.1/{string.Join('/', vectorStringArray)}";

        _vectorString = vectorString;

        var calculator = new ScoreCalculatorManager(_baseScoreCard, _temporalScoreCard, _environmentScoreCard, _modifiedScoreCard);
        var result = calculator.GetScoreResult(vectorString);
        _baseScoreCard.Score = result.ScoreDetail.BaseScore;
        _temporalScoreCard.Score = result.ScoreDetail.TempuralScore;
        _environmentScoreCard.Score = result.ScoreDetail.EnvironmentScore;
        _modifiedScoreCard.Score = result.ScoreDetail.EnvironmentScore;

        _completed = true;

        StateHasChanged();
    }

}