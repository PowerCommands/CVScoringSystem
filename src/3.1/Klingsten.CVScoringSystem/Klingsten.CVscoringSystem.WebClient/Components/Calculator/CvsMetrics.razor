@inject IEventService EventService
@inject IStateService StateService

<MudPaper Elevation="5">
    <MudChipSet @bind-SelectedChip="_selected" Filter="true" Mandatory="true">
        @foreach (var metricVariable in Metric.Variables)
        {
            <MudChip Text="grey" Color="Color.Default" SelectedColor="Color.Success" Style="margin-left: 18px" @onmouseover="() => ShowDescription(metricVariable)" @onclick="() => OnMetricClick(metricVariable)">@metricVariable.Name (@metricVariable.Vector)</MudChip>
        }
    </MudChipSet>
    <MudText Style="margin-left: 20px">@((MarkupString)$"{_guidance}")</MudText>
</MudPaper>

@code {
    MudChip? _selected;
    string _guidance = "";
    bool _showDescription = false;

    [Parameter]
    public Metric Metric { get; set; } = new();

    [Parameter] 
    public EventCallback<Metric> OnMetricValueSet { get; set; }

    protected override void OnInitialized()
    {        
        EventService.UserPreferencesChanged += preferences =>
        {
            _showDescription = preferences.ShowMetricDecription;
            StateHasChanged();
        };
    }

    private void ShowDescription(MetricVariable metricVariable) => _guidance = _showDescription ? $"<p><b>{metricVariable.Name}:</b> {metricVariable.Descricption}</p><br/><p>{Metric.Guidance}</p>" : "";

    private void OnMetricClick(MetricVariable metricVariable)
    {
        Metric.Value = metricVariable.Vector;
        OnMetricValueSet.InvokeAsync(Metric);
    }

}