<MudGrid>
    <MudItem xl="12">
        <MudToolBar Style="@($"background-color:{_theme.Palette.Primary }; color:{_theme.Palette.AppbarText }")">
            <MudText>@ScoreCard?.Name</MudText>
            <MudSpacer/>
            @if (_completed)
            {
                <MudChip Text="Score" Color="Color.Error">5.3</MudChip>
            }
        </MudToolBar>
    </MudItem>
    @foreach (var metric in _metrics)
    {
        <MudItem xl="6">
            <MudExpansionPanels MultiExpansion="true">
                <MudExpansionPanel MaxHeight="6000">
                    <TitleContent>
                        <h3 >@metric.Name (@metric.Vector) Description</h3>
                    </TitleContent>
                    <ChildContent>
                        <MudText GutterBottom="true">@((MarkupString)$"{@metric.Descricption}")</MudText>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
            <CvsMetrics Metric="metric" OnMetricValueSet="OnMetricScoreSet"></CvsMetrics>
        </MudItem>
    }
    <MudItem xl="12">
        <MudToolBar Style="@($"background-color:{_theme.Palette.Primary }; color:{_theme.Palette.AppbarText }")">
            @if (_completed)
            {
                <MudText>Vector string: @VectorString</MudText>
            }
        </MudToolBar>
    </MudItem>
</MudGrid>

@code {

    MudChip? _selected;
    MudTheme _theme = new();
    bool _completed;
    int _completedCount;
    IEnumerable<Metric> _metrics = new List<Metric>();

    [Parameter]
    public ScoreCard ScoreCard { get; set; } = null!;
    [Parameter] 
    public EventCallback<ScoreCard> OnScoreCardCompleted { get; set; }

    public double Score { get; set; }
    public string VectorString { get; set; } = "";


    protected override void OnInitialized()
    {
        _metrics = ScoreCard.Metrics;
        StateHasChanged();
    }

    private void OnMetricScoreSet(Metric metric)
    {
        _completedCount++;
        if (_completedCount <= _metrics.Count() - 1) return;
        var vectorStringArray = _metrics.Select(m => m.ToVectoryStringValue()).ToArray();
        VectorString = string.Join('/', vectorStringArray);
        ScoreCard.VectorString = VectorString;
        OnScoreCardCompleted.InvokeAsync(ScoreCard);
        _completed = true;
        StateHasChanged();
    }
}